#!/bin/bash

function exit_on_error() {
  local exit_code=$?
  if [ "$exit_code" -ne 0 ]; then
    exit "$exit_code"
  fi
}

declare -a tags
create_version="false"
while getopts ":k:i:p:vt:" OPT; do
  case "$OPT" in
  k)
    keyfile="$OPTARG"
    ;;
  i)
    image="$OPTARG"
    ;;
  p)
    project="$OPTARG"
    ;;
  v)
    create_version="true"
    ;;
  t)
    tags+=("$OPTARG")
    ;;
  \?)
    echo "Opção ${OPT} inválida."
    ;;
  esac
done

echo "Projeto: $project"
echo "Imagem: $image"
echo "Criar versão: $create_version"
[[ -n $keyfile ]] && echo "Keyfile: Existe" || echo "Keyfile: Não existe"

if [ -z "$project" ] || [ -z "$keyfile" ] || [ -z "$image" ]; then
  echo "ERRO: As opções -k -p e -i são obrigatórias."
  exit 1
fi

docker-login "$project" "$keyfile"
exit_on_error

repository="gcr.io/$project/$image"
version=$(get-next-version)
exit_on_error

if [ "$create_version" == "true" ]; then
  echo "Create git-tag ${version}"
  git tag "$version"
  git push origin "$version"
  TAGS+=("$version")
fi

if [ "${#tags[@]}" -eq 0 ]; then
  echo "ERRO: Especifique uma tag com -t 'tag' ou então utilize -v para incrementar a versão no git"
fi

if [ -f ./image.docker ]; then
  docker load --input ./image.docker
fi

for tag in "${tags[@]}"; do
  docker tag "$image" "$repository":"$tag"
  docker push "$repository":"$tag"
  echo "$repository:$tag"
done


exit 0
