#!/bin/bash

function exit_on_error() {
  EXIT_CODE=$?
  if [ "$EXIT_CODE" -ne 0 ]; then
    exit "$EXIT_CODE"
  fi
}

declare -a TAGS
while getopts ":k:i:p:vt:" OPT; do
  case "$OPT" in
  k)
    export GCLOUD_KEYFILE="$OPTARG"
    ;;
  i)
    export IMAGE="$OPTARG"
    ;;
  p)
    export GCLOUD_PROJECT="$OPTARG"
    ;;
  v)
    export CREATE_TAG="true"
    ;;
  t)
    export TAGS+=("$OPTARG")
    ;;
  \?)
    echo "Opção ${OPT} inválida."
    ;;
  esac
done

echo "Projeto: $GCLOUD_PROJECT"
echo "Imagem: $IMAGE"
echo "Criar tag: $CREATE_TAG"
[[ -n $GCLOUD_KEYFILE ]] && echo "Keyfile: Existe" || echo "Keyfile: Não existe"

if [ -z "$GCLOUD_PROJECT" ] || [ -z "$GCLOUD_KEYFILE" ] || [ -z "$IMAGE" ]; then
  echo "ERRO: As opções -k -p e -i são obrigatórias."
  exit 1
fi

docker-login
exit_on_error

REPOSITORY=gcr.io/${GCLOUD_PROJECT}/${IMAGE}
VERSION=$(get-next-version)
exit_on_error

if [ "$CREATE_TAG" == "true" ]; then
  echo "Create tag ${VERSION}"
  git tag "${VERSION}"
  git push origin "${BUMPED}"
  TAGS+=("$VERSION")
fi

if [ "${#TAGS[@]}" -eq 0 ]; then
  echo "ERRO: Especifique uma tag com -t 'tag' ou então utilize -v para incrementar a versão no git"
fi

if [ -f ./image.docker ]; then
  docker load --input ./image.docker
fi

for tag in "${TAGS[@]}"; do
  docker tag "$IMAGE" "$REPOSITORY":"$tag"
  docker push "$REPOSITORY":"$tag"
done

echo "${REPOSITORY}:{$(printf '%s\n' "$(IFS=,; printf '%s' "${TAGS[*]}")")}"

exit 0
